{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","href","autoPlay","indicators","navButtonsAlwaysVisible","fullHeightHover","map","link","src","integrity","crossOrigin","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTA6DeA,E,uKArDX,OACI,6BACE,gCACE,0BAAMC,UAAU,QACd,4BAAI,uBAAGC,KAAK,KAAR,+CACJ,4BAAI,uBAAGA,KAAK,KAAR,6BACJ,4BAAI,uBAAGA,KAAK,KAAR,8BACJ,4BAAI,uBAAGA,KAAK,KAAR,uDAGR,8BACE,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,SAAb,eAAiC,6BAAM,yDAG3C,yBAAKA,UAAW,qBACd,kBAAC,IAAD,CAAUE,UAAU,EAAMC,YAAY,EAAOC,yBAAyB,EAAMJ,UAAW,UAAWK,iBAAiB,GAE/G,CACI,uDACA,uDACA,uDACA,uDACA,uDACA,uDACA,uDACA,wDACFC,KAAI,SAAAC,GACJ,OAAO,yBAAKC,IAAKD,EAAMP,UAAW,sBAM5C,gCACE,uBAAGA,UAAU,kBAAb,+CAAuC,uBAAGC,KAAK,mBAAR,iBAGzC,4BAAQO,IAAI,mDACJC,UAAU,0EACVC,YAAY,cACpB,4BAAQF,IAAI,uEACJC,UAAU,0EACVC,YAAY,cACpB,4BAAQF,IAAI,yEACJC,UAAU,0EACVC,YAAY,mB,GAjDZC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65a070a4.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Carousel from \"react-material-ui-carousel\";\nimport Paper from '@material-ui/core/Paper'\n\nclass App extends React.Component {\n  render () {\n    return (\n        <div>\n          <header>\n            <menu className=\"menu\">\n              <li><a href=\"#\">главная</a></li>\n              <li><a href=\"#\">меню</a></li>\n              <li><a href=\"#\">о нас</a></li>\n              <li><a href=\"#\">контакты</a></li>\n            </menu>\n          </header>\n          <main>\n            <div className=\"logo-container\">\n              <div className=\"logo\">\n                <b className=\"title\">VÅRDAGEN</b><br /><span>modern fusion kitchen</span>\n              </div>\n            </div>\n            <div className={\"gallery-container\"}>\n              <Carousel autoPlay={true} indicators={false} navButtonsAlwaysVisible={true} className={\"gallery\"} fullHeightHover={false}>\n                {\n                  [\n                      \"https://www.instagram.com/p/CBLf4uzjGX5/media?size=l\",\n                      \"https://www.instagram.com/p/CBDhNaijfsX/media?size=l\",\n                      \"https://www.instagram.com/p/CBC6buMjiNK/media?size=l\",\n                      \"https://www.instagram.com/p/CBBeCCujJ5y/media?size=l\",\n                      \"https://www.instagram.com/p/CBA_jXcDApF/media?size=l\",\n                      \"https://www.instagram.com/p/CA-fCC0DltY/media?size=l\",\n                      \"https://www.instagram.com/p/CA9xwXzjBDt/media?size=l\",\n                      \"https://www.instagram.com/p/CA8YuyjDr-7/media?size=l\"\n                  ].map(link => {\n                    return <img src={link} className={\"gallery-img\"}/>\n                  })\n                }\n            </Carousel>\n          </div>\n          </main>\n          <footer>\n            <p className=\"footer-content\">Телефон: <a href=\"tel:+1234567890\">+1234567890</a></p>\n          </footer>\n\n          <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"\n                  integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\"\n                  crossOrigin=\"anonymous\"></script>\n          <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\"\n                  integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\"\n                  crossOrigin=\"anonymous\"></script>\n          <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"\n                  integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\"\n                  crossOrigin=\"anonymous\"></script>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}